//------Generated by the Framework and can be changed-----//
//------Main Activity-----//

/*
>> Together Base Activity, All Apps need have a Main Activity.
>> The Main Activity is responsible te trigger MAPE-K Cycle and Collect Smarthphone and Google Fit Data
>> This Activity start Main Execution of The Application and can be used after Login Screen (Activity)

>> This Main Activity example presents the main elements that your application's Main Screen should and can use to
perform the data collection and adaptation cycle, which is the basis of a self-adaptive application. It also has
examples of using the database using the DAO pattern and using visual elements to test the main functions of
the framework.
*/

package br.ufc.frameworkkotlin.ui

import android.content.Context
import android.content.Intent
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.navigation.findNavController
import androidx.navigation.ui.AppBarConfiguration
import androidx.navigation.ui.navigateUp
import androidx.navigation.ui.setupActionBarWithNavController
import br.ufc.frameworkkotlin.R
import br.ufc.frameworkkotlin.controllers.DataController
import br.ufc.frameworkkotlin.databinding.ActivityMainBinding
import br.ufc.frameworkkotlin.model.mapek.monitoring.GoogleFit.GoogleFitAPI
import br.ufc.frameworkkotlin.model.mapek.monitoring.GoogleFit.Samples.GoogleFitStepData
import br.ufc.frameworkkotlin.model.dao.repository.EntityRepositoriesSamples.PessoaRepository
import br.ufc.frameworkkotlin.model.dao.DBEntities.Pessoa
import br.ufc.frameworkkotlin.model.dao.interfaces.IPessoaRepository
import br.ufc.frameworkkotlin.model.entities.sensors.typeSensor
import br.ufc.frameworkkotlin.model.mapek.analysis.DataAnalysis
import br.ufc.frameworkkotlin.model.mapek.execution.ExecuteActions
import br.ufc.frameworkkotlin.model.mapek.monitoring.CollectEnergy
import br.ufc.frameworkkotlin.model.mapek.monitoring.DataManagement
import br.ufc.frameworkkotlin.model.mapek.planning.PlanningRolesManagement
import br.ufc.frameworkkotlin.model.utils.Constants
import br.ufc.frameworkkotlin.model.utils.PermissionsUtil
import br.ufc.frameworkkotlin.ui.CommonActivities.BaseActivity
import com.google.android.material.snackbar.Snackbar


const val TAG = "KotlinFramework"

enum class Energy(val value:Double){
    full(100.0),
    medium_high(55.0),
    medium_low(35.0),
    low(15.0)
}

class MainActivity : BaseActivity(),SensorEventListener {

    //------Generated by the User-----//
    private lateinit var googleFitStepData:GoogleFitStepData
    private lateinit var textview_third: TextView
    private lateinit var textview_first: TextView
    private lateinit var textview_second: TextView
    private lateinit var button: Button
    private lateinit var buttonStart: Button
    private lateinit var buttonStartMonitoring: Button
    private lateinit var buttonStop: Button
    private lateinit var buttonChangeBattery: Button
    private lateinit var appBarConfiguration: AppBarConfiguration
    private lateinit var binding: ActivityMainBinding

    private var stop:Boolean = false
    private var fitstepInfo = ""
    //------Generated by the User-----//

    //------Generated by the Framework and must be changed-----//
    //Sensor Variables (has needed declare all sensors that collect data from cellphone)
    private lateinit var sensorManager: SensorManager
    private lateinit var mAccelerometer : Sensor
    private lateinit var mGyroscope : Sensor
    //------Generated by the Framework and must be changed-----//

    //------Generated by the Framework and must not be changed-----//
    private lateinit var dbPessoa: IPessoaRepository
    //------Generated by the Framework and must not be changed-----//


    companion object{
                    //------Generated by the User-----//
                    // For Screen Informations Present
                     var flagMonitoring = false
                     var texto = "Testando"
                     var energy = Energy.full.value
                    //------Generated by the User-----//
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //------Generated by the User-----//
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        //------Generated by the User-----//



        //------Generated by the Framework and must not be changed-----//
        //MAPE-K initiate
        val monitor = DataManagement(this)
        val analysis = DataAnalysis(this)
        val planning = PlanningRolesManagement(this)
        val execution = ExecuteActions(this)

        monitor.observers += analysis
        analysis.observers += planning
        planning.observers += execution
        execution.observers += monitor
        //------Generated by the Framework and must not be changed-----//


        //------Generated by the Framework and must be changed-----//
        //Declare quais os tipos de sensores vai utilizar
        sensors.add(typeSensor.ACC)

        //Initiate Sensor
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
        mAccelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)
        mGyroscope = sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE)
        //------Generated by the Framework and must be changed-----//


        //------Generated by the Framework and can be changed-----//
        //Verifica Permissões
        if(!PermissionsUtil().checkDevicePermission(this))
            PermissionsUtil().requetPermission(this)

        //GoogleFit
        val googleFitAPI = GoogleFitAPI(this)
        if(!googleFitAPI.oAuthPermissionsApproved())
            googleFitAPI.requestFitPermission()
        dataController = DataController()
        //------Generated by the Framework and can be changed-----//


        //------Generated by the User-----//
        baseDirectory = getExternalFilesDir(null)!!.absolutePath
        assetManager = getAssets()
        googleFitStepData = GoogleFitStepData(googleFitAPI)
        Log.i(TAG,"Running")
        Log.i(TAG,baseDirectory)

        //DB
        //Exemplo Base de Dados
        dbPessoa = PessoaRepository(this)
        dbPessoa.Add(Pessoa(0,"João"))
        dbPessoa.Add(Pessoa(1,"Pedro"))
        dbPessoa.Add(Pessoa(2,"Deviante"))

        for(pessoa in dbPessoa.getAll()){
            Log.i("Pessoa", pessoa.nome)
        }

        //para testar retorno do BD com botão Next
        var count = 0
        var pessoas = dbPessoa.getAll()

        setSupportActionBar(binding.toolbar)

        textview_first = findViewById(R.id.textview_first) as TextView
        textview_second = findViewById(R.id.lblACC) as TextView
        textview_third = findViewById(R.id.lblGyr) as TextView
        button = findViewById<Button>(R.id.button_first)
        buttonStart = findViewById<Button>(R.id.btnStart) as Button
        buttonStartMonitoring = findViewById<Button>(R.id.btnStartMonitoring) as Button
        buttonStop = findViewById<Button>(R.id.btnStop) as Button
        buttonChangeBattery = findViewById<Button>(R.id.btnChangeBattery) as Button

        textview_first.setText(texto)

        button.setOnClickListener {
            Toast.makeText(applicationContext, pessoas.get(count).nome, Toast.LENGTH_LONG).show()
            if (count == pessoas.size -1)
                count = 0
            else
                count+=1
        }

        buttonStart.setOnClickListener {

            Thread(Runnable {
                while (true) {
                    // Updating Text View at current
                    // iteration

                    runOnUiThread{
                        val valuesACC = collectAcc.getValueData()
                        textview_second.setText("ACC: "+ valuesACC) }

                    // Thread sleep for 1 sec
                    Thread.sleep(10)
                    //runOnUiThread{monitor.Monitoring()}

                    if (stop){
                        stop = false
                        break
                    }

                }
            }).start()

            Thread(Runnable {
                while (true) {
                    // Updating Text View at current
                    // iteration

                    runOnUiThread{
                        val collectGyr = collectGyr.getValueData()
                        textview_third!!.setText("GYR: "+ collectGyr) }

                    // Thread sleep for 1 sec
                    Thread.sleep(10)
                    //runOnUiThread{monitor.Monitoring()}

                    if (stop){
                        stop = false
                        break
                    }

                }
            }).start()


            Thread(Runnable {
                while(true) {
                    runOnUiThread {
                        if(MainActivity.texto != textview_first.text){
                            textview_first.setText(MainActivity.texto)
                        }
                    }

                    if (stop){
                        stop = false
                        break
                    }

                    Thread.sleep(10)
                }
            }).start()
        }

        buttonStartMonitoring.setOnClickListener {
            Thread(Runnable {
                //------Generated by the Framework and can be changed-----//
                monitor.Monitoring()
                //------Generated by the Framework and can be changed-----//

            }).start()
        }

        buttonStop.setOnClickListener{
            stop = true
            textview_second.setText("")
            textview_third!!.setText("")

            ////////////////
            ///Google Fit///
            ////////////////
            googleFitStepData!!.fitSignIn(Constants.GOOGLE_FIT_PERMISSIONS_REQUEST_CODE)

            dataController.fullLog()
            fitstepInfo = "nome: Evilasio altura:"+ dataController.height.toString() + " peso:" + dataController.weight.toString()

            Thread(Runnable {
                while(true) {
                    runOnUiThread {
                        if(fitstepInfo != textview_first.text){
                            textview_third!!.setText(fitstepInfo)
                        }
                    }
                    Thread.sleep(10)
                }


            }).start()
        }

        buttonChangeBattery.setOnClickListener{
            when(MainActivity.energy){
                Energy.full.value -> {
                    MainActivity.energy = Energy.medium_high.value
                    textview_first.setText(CollectEnergy().collectEnergy(this).toString())
                }
                Energy.medium_high.value -> {
                    MainActivity.energy = Energy.medium_low.value
                    textview_first.setText(CollectEnergy().collectEnergy(this).toString())
                }
                Energy.medium_low.value -> {
                    MainActivity.energy = Energy.low.value
                    textview_first.setText(CollectEnergy().collectEnergy(this).toString())
                }
                Energy.low.value -> {
                    MainActivity.energy = Energy.full.value
                    textview_first.setText(CollectEnergy().collectEnergy(this).toString())
                }
            }

            runOnUiThread {
                Log.i("Result", "Value Battery: "+ MainActivity.energy)//this.energy )
            }
        }

        val navController = findNavController(R.id.nav_host_fragment_content_main)
        appBarConfiguration = AppBarConfiguration(navController.graph)
        setupActionBarWithNavController(navController, appBarConfiguration)

        binding.fab.setOnClickListener { view ->
            Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                    .setAction("Action", null).show()
        }
        //------Generated by the User-----//

    }


    //------Generated by the Framework and can be changed-----//
    //O que acontece quando voltar para essa tela
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        when (resultCode) {
            RESULT_OK -> {
                val postSignInAction = requestCode
                postSignInAction.let {
                }
            }
            else -> oAuthErrorMsg(requestCode, resultCode)
        }
    }
    //------Generated by the Framework and can be changed-----//


    //------Generated by the User-----//
    //Apresenta erro se houver erro de reuqisição ao voltar para a tela
    private fun oAuthErrorMsg(requestCode: Int, resultCode: Int) {
        val message = """
            There was an error signing into Fit. Check the troubleshooting section of the README
            for potential issues.
            Request code was: $requestCode
            Result code was: $resultCode
        """.trimIndent()
        Log.e(TAG, message)
        Toast.makeText(applicationContext, message, Toast.LENGTH_LONG).show()
    }
    //------Generated by the User-----//



    //------Generated by the User-----//
    //Gera opções do menu
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        // Inflate the menu; this adds items to the action bar if it is present.
        menuInflater.inflate(R.menu.menu_main, menu)
        return true
    }

    //Executa quando opções do Menu é selecionada
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        return when (item.itemId) {
            R.id.action_settings -> true
            else -> super.onOptionsItemSelected(item)
        }
        //unregisterFitnessDataListener()
    }


    //Gera Menu de navegação
    override fun onSupportNavigateUp(): Boolean {
        val navController = findNavController(R.id.nav_host_fragment_content_main)
        return navController.navigateUp(appBarConfiguration)
                || super.onSupportNavigateUp()
    }

    //------Generated by the User-----//

    //------Generated by the Framework and must be changed-----//
    //---Executa ao iniciar a tela//
    override fun onResume() {
        super.onResume()
        sensorManager!!.registerListener(this, mAccelerometer,
            SensorManager.SENSOR_DELAY_GAME)
        sensorManager!!.registerListener(this, mGyroscope,
            SensorManager.SENSOR_DELAY_GAME)
    }

    //---Executa ao para tela//
    override fun onPause() {
        super.onPause()
        sensorManager!!.unregisterListener(this)
    }

    //---Executa quando sensor muda o valor//
    override fun onSensorChanged(event: SensorEvent ?) {
        if (event != null) {
            if(event.sensor.type == Sensor.TYPE_ACCELEROMETER)
                collectAcc.collectData(event)
            if(event.sensor.type == Sensor.TYPE_GYROSCOPE)
                collectGyr.collectData(event)
        }
    }
    //------Generated by the Framework and must be changed-----//

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
    }
}