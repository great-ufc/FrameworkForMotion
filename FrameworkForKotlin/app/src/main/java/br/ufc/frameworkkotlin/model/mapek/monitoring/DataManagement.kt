//------Generated by the Framework and must be changed-----//
//------Monitoring Module Main Class-----//

package br.ufc.frameworkkotlin.model.mapek.monitoring

import br.ufc.frameworkkotlin.model.GoogleFit.Samples.GoogleFitGetAllData
import br.ufc.frameworkkotlin.model.entities.sensors.ValuesSensor
import br.ufc.frameworkkotlin.model.entities.sensors.typeSensor
import br.ufc.frameworkkotlin.model.mapek.observer.*
import br.ufc.frameworkkotlin.model.utils.Animations
import br.ufc.frameworkkotlin.model.utils.Constants
import br.ufc.frameworkkotlin.ui.CommonActivities.BaseActivity

class DataManagement(val context: BaseActivity):IMonitorObservable,IExecutionObserver {
    private var dataCollectTime:Long = 0
    private var googleFitAllData:GoogleFitGetAllData?=null

    override val observers: MutableList<IMonitorObserver> = mutableListOf()

    fun Monitoring(){

        //Remove
        Thread{
            Animations.monitoring()
        }.start()

        //Coletar os dados dos sensores
        if (this.dataCollectTime == (0).toLong())
            this.dataCollectTime = System.currentTimeMillis()

        while (System.currentTimeMillis() < this.dataCollectTime+(Constants.WINDOW*(100).toLong())) {
            //Lista de Sensores
            // coloque aqui os sensores e informe o mÃ©todo de coleta dele
            if (context.sensors.contains(typeSensor.ACC))
                context.datas += ValuesSensor(
                    typeSensor.ACC.name,
                    context.collectAcc.FormatData(context.collectAcc.getValueData())
                )

            //Fim Coleta Sensores

            //coleta de bateria
            //context.energy = CollectEnergy().collectEnergy(context)

            //Collect Data from GoogleFit
            context.dataController = br.ufc.frameworkkotlin.controllers.DataController()
            googleFitAllData =  GoogleFitGetAllData(context.googleFitAPI)
            googleFitAllData!!.checkPermissionAndGetData()

        }
        this.dataCollectTime = 0
        //Observer pattern
        sendUpdateEvent()
    }

    override fun update() {
        Monitoring()
    }

}