//------Generated by the Framework and can be changed-----//
//------Base Activity for Main Activity and Model Functions-----//
package br.ufc.frameworkkotlin.ui.CommonActivities

import android.content.res.AssetManager
import android.os.Bundle
import android.os.PersistableBundle
import android.view.Gravity
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import br.ufc.frameworkkotlin.model.mapek.monitoring.GoogleFit.GoogleFitAPI
import br.ufc.frameworkkotlin.model.entities.KnowledgeRepresentation
import br.ufc.frameworkkotlin.model.entities.sensors.ValuesSensor
import br.ufc.frameworkkotlin.model.entities.sensors.typeSensor
import br.ufc.frameworkkotlin.model.mapek.knowledge.KnowledgeManagement
import br.ufc.frameworkkotlin.model.mapek.monitoring.CollectAcc
import br.ufc.frameworkkotlin.model.mapek.monitoring.CollectGyr
import br.ufc.frameworkkotlin.controllers.DataController

abstract class BaseActivity : AppCompatActivity() {

    private lateinit var toast: Toast

    lateinit var dataController: DataController
    lateinit var baseDirectory:String
    lateinit var assetManager: AssetManager
    var knowledgeRepresentation: KnowledgeRepresentation? = null
    var energy: Double? = null
    var actions: MutableList<String> = mutableListOf<String>()
    var sensors = mutableListOf<typeSensor>()
    var datas = mutableListOf<ValuesSensor>()

    val googleFitAPI = GoogleFitAPI(this)
    val knowledgeManagement = KnowledgeManagement(this)

    //Sensor Collect Data Class (has needed declare all sensors that collect data from cellphone)
    //Similar ao CAC do LOCCAm
    var collectAcc = CollectAcc()
    var collectGyr = CollectGyr()

    companion object{lateinit var finalStatus: String}



    override fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?) {
        super.onCreate(savedInstanceState, persistentState)
    }

    fun showLongToast(text: String, isCenter: Boolean) {
        showToast(text, Toast.LENGTH_LONG, isCenter)
    }

    fun showShortToast(text: String, isCenter: Boolean) {
        showToast(text, Toast.LENGTH_SHORT, isCenter)
    }

    private fun showToast(text: String, mode: Int, isCenter: Boolean){
        toast = Toast.makeText(applicationContext, text, mode)
        if(isCenter){
            toast.setGravity(Gravity.CENTER, 0, 0)
        }
        toast.show()
    }

    override fun onSupportNavigateUp(): Boolean {
        onBackPressed()
        finish()
        return true
    }

}