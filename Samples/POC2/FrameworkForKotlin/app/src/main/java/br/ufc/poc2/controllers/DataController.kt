//------Generated by the Framework and can be changed-----//
//------Select Data from GoogleFit Data-----//

package br.ufc.poc2.controllers

import android.util.Log
import br.ufc.poc2.model.utils.DateUtil
import com.google.android.gms.fitness.data.DataSet
import com.google.android.gms.fitness.data.DataType
import com.google.android.gms.fitness.data.Field
import java.util.concurrent.TimeUnit
import kotlin.properties.Delegates

class DataController {

    private val TAG = br.ufc.poc2.controllers.DataController::class.java.simpleName

    companion object {
        const val NUM_ATTRS: Int = 16
    }

    private var errors: MutableList<String> = mutableListOf()

    var height: Double = 0.0
    var weight: Double = 0.0

    private var lightSleep: Double = 0.0
    private var deepSleep: Double = 0.0
    private var remSleep: Double = 0.0
    private var awakeSleep: Double = 0.0

    private var steps = 0
    private var caloriesSpent: Double = 0.0

    private var incomingCalls: Double = 0.0
    private var outgoingCalls: Double = 0.0
    private var blockedCalls: Double = 0.0
    private var missedCalls: Double = 0.0
    private var rejectedCalls: Double = 0.0
    private var incomingCallsAverageDuration: Double = 0.0
    private var outgoingCallsAverageDuration: Double = 0.0

    private var diffWifi: Int = 0
    private var whatsAppReport: String = "0,0,0,0,0"
    private var heartRate: MutableList<Double> = mutableListOf()
    private var attrsFilled: Int by Delegates.observable(0) { _, _, newValue ->
        onAttrsFilled?.invoke(newValue)
    }

    var onAttrsFilled: ((Int) -> Unit)? = null

    fun checkAttrsFilled(): Boolean {
        return br.ufc.poc2.controllers.DataController.Companion.NUM_ATTRS == attrsFilled
    }

    fun fullLog() {
        Log.i(TAG, "Height: $height")
        Log.i(TAG, "Weight: $weight")
        Log.i(TAG, "---------------- Sleep --------------")
        Log.i(TAG, "\tLightSleep: $lightSleep")
        Log.i(TAG, "\tDeepSleep: $deepSleep")
        Log.i(TAG, "\tREMSleep: $remSleep")
        Log.i(TAG, "\tAwakeSleep: $awakeSleep")
        Log.i(TAG, "---------- Steps and Calories -------")
        Log.i(TAG, "\tSteps: $steps")
        Log.i(TAG, "\tCaloriesSpent: $caloriesSpent")
        Log.i(TAG, "-------------- Heart Rate -----------")
        Log.i(
            TAG,
            "HeartRate: ${heartRate.joinToString(prefix = "[", postfix = "]", separator = ",")}"
        )
        Log.i(TAG, "---------- Physical Activities ------")
        Log.i(TAG, "---------------- Calls --------------")
        Log.i(TAG, "\tIncomingCalls: $incomingCalls")
        Log.i(TAG, "\tOutgoingCalls: $outgoingCalls")
        Log.i(TAG, "\tBlockedCalls: $blockedCalls")
        Log.i(TAG, "\tMissedCalls: $missedCalls")
        Log.i(TAG, "\tRejectedCalls: $rejectedCalls")
        Log.i(TAG, "\tIncomingCallsAverageDuration: $incomingCallsAverageDuration")
        Log.i(TAG, "\tOutgoingCallsAverageDuration: $outgoingCallsAverageDuration")
        Log.i(TAG, "------------ Usage Stats -----------")
        Log.i(TAG, "------------- Locations ------------")
        Log.i(TAG, "------------- Wi-Fi ------------")
        Log.i(TAG, "\tDifferent WiFi: ${diffWifi}")
    }

    fun getErrors(): MutableList<String> {
        return this.errors
    }

    fun registerGoogleFitError(dataType: DataType){
        errors.add(dataType.zzm().split(".")[0])
        attrsFilled++
    }

    fun setData(dataType: DataType, dataset: DataSet) {
        when (dataType) {
            DataType.TYPE_HEIGHT -> getHeight(dataset)
            DataType.TYPE_WEIGHT -> getWeight(dataset)
            DataType.TYPE_SLEEP_SEGMENT -> getSleep(dataset)
            DataType.TYPE_HEART_RATE_BPM -> getHeartRate(dataset)
        }
    }

    fun setData(dataType: DataType, datasets: List<DataSet>) {
        when (dataType) {
            DataType.AGGREGATE_STEP_COUNT_DELTA -> getStepData(datasets)
            DataType.AGGREGATE_CALORIES_EXPENDED -> getCaloriesData(datasets)
            DataType.TYPE_ACTIVITY_SEGMENT -> getActivityData(datasets)
        }
    }

    private fun getHeight(dataSet: DataSet) {
        for (dp in dataSet.dataPoints) {
            for (field in dp.dataType.fields) {
                height = dp.getValue(field).toString().toDouble()
            }
        }
        //Log.i(TAG, "Height: ${height.toString()}")
        attrsFilled++
    }

    private fun getWeight(dataSet: DataSet) {
        for (dp in dataSet.dataPoints) {
            for (field in dp.dataType.fields) {
                weight = dp.getValue(field).toString().toDouble()
            }
        }
        //Log.i(TAG, "Weight: ${weight.toString()}")
        attrsFilled++
    }

    private fun getSleep(dataSet: DataSet) {
        val sleepStages = arrayOf(
            "Unused", "Awake (during sleep)",
            "Sleep", "Out-of-bed",
            "Light sleep", "Deep sleep", "REM sleep"
        )

        for (point in dataSet.dataPoints) {
            val sleepStageVal = point.getValue(Field.FIELD_SLEEP_SEGMENT_TYPE).asInt()
            val sleepStage = sleepStages[sleepStageVal]
            val segmentStart = point.getStartTime(TimeUnit.MILLISECONDS)
            val segmentEnd = point.getEndTime(TimeUnit.MILLISECONDS)
            val intervalSeconds = (segmentEnd - segmentStart) / 1000
            when (sleepStage) {
                "Light sleep" -> lightSleep += intervalSeconds
                "Deep sleep" -> deepSleep += intervalSeconds
                "REM sleep" -> remSleep += intervalSeconds
                "Awake (during sleep)" -> awakeSleep += intervalSeconds
            }
            //Log.i(TAG, "$sleepStage for $intervalSeconds seconds")
        }
        attrsFilled++
    }

    private fun getStepData(datasets: List<DataSet>) {
        datasets.forEach { dataset ->
            for (dp in dataset.dataPoints) {
                for (field in dp.dataType.fields) {
                    steps += dp.getValue(field).asInt()
                }
            }
        }
        //Log.i(TAG, "Steps: ${steps.toString()}")
        attrsFilled++
    }

    private fun getCaloriesData(datasets: List<DataSet>) {
        datasets.forEach { dataset ->
            for (dp in dataset.dataPoints) {
                for (field in dp.dataType.fields) {
                    caloriesSpent += dp.getValue(field).toString().toDouble()
                }
            }
            //Log.i(TAG, "Calories: ${caloriesSpent.toString()}")
        }
        attrsFilled++
    }

    private fun getHeartRate(dataSet: DataSet) {
        for (dp in dataSet.dataPoints) {
            for (field in dp.dataType.fields) {
                heartRate.add(dp.getValue(field).toString().toDouble())
            }
        }
        //Log.i(TAG, "HeartRate: ${heartRate.joinToString(prefix = "[", postfix = "]", separator = ",")}")
        attrsFilled++
    }

    private fun getActivityData(datasets: List<DataSet>) {
        datasets.forEach { dataset ->
            for (dp in dataset.dataPoints) {
                var description: String? = null
                var duration: Long? = null
                var durationAsString: String? = null
                var segments: Int? = null

                for (field in dp.dataType.fields) {
                    when (field.name) {
                        Field.FIELD_ACTIVITY.name -> {
                            description = getActivityDescription(dp.getValue(field).asInt())
                        }
                        Field.FIELD_DURATION.name -> {
                            duration = dp.getValue(field).asInt().toLong()
                            durationAsString = DateUtil.getMillisecondsFormatted(
                                dp.getValue(field).asInt().toLong()
                            )
                        }
                        Field.FIELD_NUM_SEGMENTS.name -> {
                            segments = dp.getValue(field).asInt()
                        }
                    }
                }

            }
        }
        //physicalActivities.forEach { Log.i(TAG, "physicalActivities: ${it.toString()}") }
        attrsFilled++
    }

    fun setIncomingCalls(input: Double) {
        incomingCalls = input
        //Log.i(TAG, "incomingCalls: $incomingCalls")
        attrsFilled++
    }

    fun setOutgoingCalls(input: Double) {
        outgoingCalls = input
        //Log.i(TAG, "outgoingCalls: $outgoingCalls")
        attrsFilled++
    }

    fun setBlockedCalls(input: Double) {
        blockedCalls = input
        //Log.i(TAG, "blockedCalls: $blockedCalls")
        attrsFilled++
    }

    fun setMissedCalls(input: Double) {
        missedCalls = input
        //Log.i(TAG, "missedCalls: $missedCalls")
        attrsFilled++
    }

    fun setRejectedCalls(input: Double) {
        rejectedCalls = input
        //Log.i(TAG, "rejectedCalls: $rejectedCalls")
        attrsFilled++
    }

    fun setIncomingCallsAverageDuration(input: Double) {
        incomingCallsAverageDuration = input
        //Log.i(TAG, "incomingCallsAverageDuration: $incomingCallsAverageDuration")
        attrsFilled++
    }

    fun setOutgoingCallsAverageDuration(input: Double) {
        outgoingCallsAverageDuration = input
        //Log.i(TAG, "outgoingCallsAverageDuration: $outgoingCallsAverageDuration")
        attrsFilled++
    }


    fun setDiffWifi(value: Int){
        diffWifi = value
    }

    fun setWhatsAppReport(value: String){
        whatsAppReport = value
    }

    private fun getActivityDescription(value: Int): String {
        when (value) {
            9 -> return "Aerobics"
            119 -> return "Archery"
            10 -> return "Badminton"
            11 -> return "Baseball"
            12 -> return "Basketball"
            13 -> return "Biathlon"
            1 -> return "Biking"
            14 -> return "Handbiking"
            15 -> return "Mountain biking"
            16 -> return "Road biking"
            17 -> return "Spinning"
            18 -> return "Stationary biking"
            19 -> return "Utility biking"
            20 -> return "Boxing"
            21 -> return "Calisthenics"
            22 -> return "Circuit training"
            23 -> return "Cricket"
            113 -> return "Crossfit"
            106 -> return "Curling"
            24 -> return "Dancing"
            102 -> return "Diving"
            117 -> return "Elevator"
            25 -> return "Elliptical"
            103 -> return "Ergometer"
            118 -> return "Escalator"
            26 -> return "Fencing"
            27 -> return "Football (American)"
            28 -> return "Football (Australian)"
            29 -> return "Football (Soccer)"
            30 -> return "Frisbee"
            31 -> return "Gardening"
            32 -> return "Golf"
            122 -> return "Guided Breathing"
            33 -> return "Gymnastics"
            34 -> return "Handball"
            114 -> return "HIIT"
            35 -> return "Hiking"
            36 -> return "Hockey"
            37 -> return "Horseback riding"
            38 -> return "Housework"
            104 -> return "Ice skating"
            0 -> return "In vehicle"
            115 -> return "Interval Training"
            39 -> return "Jumping rope"
            40 -> return "Kayaking"
            41 -> return "Kettlebell training"
            42 -> return "Kickboxing"
            43 -> return "Kitesurfing"
            44 -> return "Martial arts"
            45 -> return "Meditation"
            46 -> return "Mixed martial arts"
            108 -> return "Other (unclassified fitness activity)"
            47 -> return "P90X exercises"
            48 -> return "Paragliding"
            49 -> return "Pilates"
            50 -> return "Polo"
            51 -> return "Racquetball"
            52 -> return "Rock climbing"
            53 -> return "Rowing"
            54 -> return "Rowing machine"
            55 -> return "Rugby"
            8 -> return "Running"
            56 -> return "Jogging"
            57 -> return "Running on sand"
            58 -> return "Running (treadmill)"
            59 -> return "Sailing"
            60 -> return "Scuba diving"
            61 -> return "Skateboarding"
            62 -> return "Skating"
            63 -> return "Cross skating"
            105 -> return "Indoor skating"
            64 -> return "Inline skating (rollerblading)"
            65 -> return "Skiing"
            66 -> return "Back-country skiing"
            67 -> return "Cross-country skiing"
            68 -> return "Downhill skiing"
            69 -> return "Kite skiing"
            70 -> return "Roller skiing"
            71 -> return "Sledding"
            73 -> return "Snowboarding"
            74 -> return "Snowmobile"
            75 -> return "Snowshoeing"
            120 -> return "Softball"
            76 -> return "Squash"
            77 -> return "Stair climbing"
            78 -> return "Stair-climbing machine"
            79 -> return "Stand-up paddleboarding"
            3 -> return "Still (not moving)"
            80 -> return "Strength training"
            81 -> return "Surfing"
            82 -> return "Swimming"
            84 -> return "Swimming (open water)"
            83 -> return "Swimming (swimming pool)"
            85 -> return "Table tennis (ping pong)"
            86 -> return "Team sports"
            87 -> return "Tennis"
            5 -> return "Tilting (sudden device gravity change)"
            88 -> return "Treadmill (walking or running)"
            4 -> return "Unknown (unable to detect activity)"
            89 -> return "Volleyball"
            90 -> return "Volleyball (beach)"
            91 -> return "Volleyball (indoor)"
            92 -> return "Wakeboarding"
            7 -> return "Walking"
            93 -> return "Walking (fitness)"
            94 -> return "Nording walking"
            95 -> return "Walking (treadmill)"
            116 -> return "Walking (stroller)"
            96 -> return "Waterpolo"
            97 -> return "Weightlifting"
            98 -> return "Wheelchair"
            99 -> return "Windsurfing"
            100 -> return "Yoga"
            101 -> return "Zumba"
        }
        return "Unknown"
    }
}