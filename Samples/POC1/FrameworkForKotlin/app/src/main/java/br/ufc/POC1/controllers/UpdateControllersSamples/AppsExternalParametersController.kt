package br.ufc.POC1.controllers.UpdateControllersSamples

import android.app.DownloadManager
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.net.Uri
import android.os.Build
import android.os.Environment
import android.util.Log
import androidx.annotation.RequiresApi
import androidx.core.content.FileProvider
import br.ufc.POC1.R
import br.ufc.POC1.model.utils.Constants
import br.ufc.POC1.model.utils.PermissionsUtil
import br.ufc.POC1.ui.CommonActivities.BaseActivity
import okhttp3.*
import org.json.JSONArray
import org.json.JSONObject
import java.io.File
import java.io.IOException

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

//------Generated by the Framework and can be changed-----//
class AppsExternalParametersController(private val context: BaseActivity) {

    private val tag = AppsExternalParametersController::class.java.simpleName
    private val params = hashMapOf<String, String>()

    fun adjustApp() {
       val urlSheet = String.format(
            Constants.SHEET_URL_MASK, Constants.SHEET_ID,
            Constants.SHEET_TAB_NAME_PARAMS,
           context.getString(R.string.gsheet_key)
       )

       val client = OkHttpClient()
       val request = Request.Builder().url(urlSheet).build()

       client.newCall(request).enqueue(object : Callback {
           override fun onFailure(call: Call, e: IOException) {
               // Handle default parameters
           }

           override fun onResponse(call: Call, response: Response) {
               val strResponse = response.body!!.string()
               //Log.d(TAG, strResponse)
               val json = JSONObject(strResponse)
               val rows: JSONArray = json.getJSONArray("values")
               val size: Int = rows.length()
               for (i in 1 until size) {
                   val row: JSONArray = rows.getJSONArray(i)
                   val key = row.getString(0)
                   val value = row.getString(1)
                   params[key] = value
               }

               processExternalParams()
           }
       })
    }

    private fun processExternalParams(){
        params.forEach { (key, value) ->
            Log.i(tag, "Key: $key, Value: $value")
            when(key){
                "current_version" -> {
                    // Check if local app is out of date
                    val localVersionNumber = convertVersion(br.ufc.POC1.BuildConfig.VERSION_NAME)
                    val currentVersionNumber = convertVersion(value)
                    if(localVersionNumber < currentVersionNumber){
                        // Display notification requesting update
  //                      NotificationBuilder(context).createAndShowUpdateAppNotification(BuildConfig.VERSION_NAME, value)
                    }else{
                        Log.d(tag, "The app is up to date!")
                    }
                }
            }
        }
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun downloadAndInstall(version: String){
        if(PermissionsUtil().checkDevicePermission(context)){
            val current = LocalDateTime.now()
            val formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS")
            val formatted = current.format(formatter)
            val filename = "$formatted-qol-monitor-${version.trim()}.apk"

            val newAPKFile = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), filename)
            val uri = FileProvider.getUriForFile(context, context.packageName + ".provider", newAPKFile)
            newAPKFile.setReadable(true)

            if(newAPKFile.exists()){
                newAPKFile.delete()
            }

            // Get url of app on server
            val url: String = String.format(Constants.APK_DOWNLOAD_URL, version)

            // Set download manager
            val request = DownloadManager.Request(Uri.parse(url))
            request.setDescription(context.resources.getText(R.string.downloading_message))
            request.setTitle(context.applicationInfo.name)

            // Set destination
            request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, filename)

            // Get download service and enqueue file
            val manager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager?
            val downloadID = manager!!.enqueue(request)

            //set BroadcastReceiver to install app when .apk is downloaded
            val onComplete: BroadcastReceiver = object : BroadcastReceiver() {
                override fun onReceive(ctxt: Context?, intent: Intent?) {
                    if (intent != null) {
                        val receivedID = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1)
                        if(receivedID == downloadID){
                            val installIntent = Intent(Intent.ACTION_INSTALL_PACKAGE)
                            installIntent.data = uri
                            installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                            context.startActivity(installIntent)
                            context.unregisterReceiver(this)
                        }
                    }
                }
            }

            // Register receiver for when .apk download is compete
            context.registerReceiver(onComplete, IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE))
        }else{
            PermissionsUtil().requetPermission(context)
        }
    }

    private fun convertVersion(version: String): Int{
        var versionInt : Int = version.split(".")[0].trim().toInt() * 100
        versionInt += version.split(".")[1].trim().toInt() * 10
        versionInt += version.split(".")[2].trim().toInt() * 1
        return versionInt
    }
}
//------Generated by the Framework and can be changed-----//