//------Generated by the Framework and must not be changed-----//
//------Google Fit API Standard Functions-----//
package br.ufc.frameworkkotlin.model.mapek.monitoring.GoogleFit

import br.ufc.frameworkkotlin.model.utils.Constants
import br.ufc.frameworkkotlin.ui.CommonActivities.BaseActivity
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInAccount
import com.google.android.gms.fitness.FitnessOptions
import com.google.android.gms.fitness.data.*


class GoogleFitAPI (val activity: BaseActivity) {
    private val TAG = GoogleFitAPI::class.java.simpleName
    private lateinit var account : GoogleSignInAccount


    fun requestFitPermission() = Constants.GOOGLE_FIT_PERMISSIONS_REQUEST_CODE.let{ GoogleSignIn.requestPermissions(
        activity,
        Constants.GOOGLE_FIT_PERMISSIONS_REQUEST_CODE,
        getGoogleAccount(), getFitnessOptions())
    }
    fun oAuthPermissionsApproved() = GoogleSignIn.hasPermissions(getGoogleAccount(), getFitnessOptions())
    fun getGoogleAccount() = GoogleSignIn.getAccountForExtension(activity, getFitnessOptions())

    companion object{
        fun getFitnessOptions(): FitnessOptions {
            return FitnessOptions.builder()
                .addDataType(DataType.TYPE_STEP_COUNT_DELTA,        FitnessOptions.ACCESS_READ)
                .addDataType(DataType.AGGREGATE_STEP_COUNT_DELTA,   FitnessOptions.ACCESS_READ)
                .addDataType(DataType.AGGREGATE_ACTIVITY_SUMMARY,   FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_HEART_RATE_BPM,          FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_ACTIVITY_SEGMENT,        FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_SLEEP_SEGMENT,           FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_MOVE_MINUTES,            FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_HEART_POINTS,            FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_WEIGHT,                  FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_HEIGHT,                  FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_CALORIES_EXPENDED,       FitnessOptions.ACCESS_READ)
                .addDataType(DataType.AGGREGATE_CALORIES_EXPENDED,  FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_DISTANCE_DELTA,          FitnessOptions.ACCESS_READ)
                .addDataType(DataType.AGGREGATE_DISTANCE_DELTA,     FitnessOptions.ACCESS_READ)
                .addDataType(DataType.TYPE_LOCATION_SAMPLE,         FitnessOptions.ACCESS_READ)
                .build()
        }
    }

}