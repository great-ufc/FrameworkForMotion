//------Generated by the Framework and can be changed-----//
//------Main Activity-----//

/*
>> Together Base Activity, All Apps need have a Main Activity.
>> The Main Activity is responsible te trigger MAPE-K Cycle and Collect Smarthphone and Google Fit Data
>> This Activity start Main Execution of The Application and can be used after Login Screen (Activity)

>> This Main Activity example presents the main elements that your application's Main Screen should and can use to
perform the data collection and adaptation cycle, which is the basis of a self-adaptive application. It also has
examples of using the database using the DAO pattern and using visual elements to test the main functions of
the framework.
*/

package br.ufc.POC1.ui

import android.content.Intent
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.FragmentManager
import androidx.fragment.app.FragmentTransaction
import androidx.fragment.app.replace
import androidx.navigation.ui.AppBarConfiguration
import br.ufc.POC1.R
import br.ufc.POC1.controllers.DataController
import br.ufc.POC1.databinding.ActivityMainBinding
import br.ufc.POC1.model.dao.DBEntities.Pessoa
import br.ufc.POC1.model.dao.interfaces.IPessoaRepository
import br.ufc.POC1.model.dao.repository.EntityRepositoriesSamples.PessoaRepository
import br.ufc.POC1.model.entities.sensors.typeSensor
import br.ufc.POC1.model.mapek.analysis.DataAnalysis
import br.ufc.POC1.model.mapek.execution.ExecuteActions
import br.ufc.POC1.model.mapek.monitoring.DataManagement
import br.ufc.POC1.model.mapek.monitoring.GoogleFit.GoogleFitAPI
import br.ufc.POC1.model.mapek.monitoring.GoogleFit.Samples.GoogleFitStepData
import br.ufc.POC1.model.mapek.planning.PlanningRolesManagement
import br.ufc.POC1.model.utils.PermissionsUtil
import br.ufc.POC1.ui.CommonActivities.BaseActivity


const val TAG = "KotlinFramework"

enum class Energy(val value:Double){
    full(100.0),
    medium_high(55.0),
    medium_low(35.0),
    low(15.0)
}

class MainActivity : BaseActivity(),SensorEventListener {

    //------Generated by the User-----//
    private lateinit var googleFitStepData:GoogleFitStepData
    private lateinit var textview_first: TextView
    private lateinit var textview_second: TextView
    private lateinit var buttonHistoric: Button
    private lateinit var buttonStartMonitoring: Button
    private lateinit var appBarConfiguration: AppBarConfiguration
    private lateinit var binding: ActivityMainBinding

    private var stop:Boolean = false
    private var fitstepInfo = ""
    //------Generated by the User-----//

    //------Generated by the Framework and must be changed-----//
    //Sensor Variables (has needed declare all sensors that collect data from cellphone)
    private lateinit var sensorManager: SensorManager
    private lateinit var mAccelerometer : Sensor
    private lateinit var mGyroscope : Sensor
    private lateinit var dbPessoa: IPessoaRepository
    //------Generated by the Framework and must not be changed-----//


    companion object{
                    //------Generated by the User-----//
                    // For Screen Informations Present
                     var flagMonitoring = false
                     var texto = ""
                     var energy = Energy.full.value
                     var alarm:Boolean = false
                    //------Generated by the User-----//
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //------Generated by the User-----//
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        //------Generated by the User-----//


        //------Generated by the Framework and must not be changed-----//
        //MAPE-K initiate
        val monitor = DataManagement(this)
        val analysis = DataAnalysis(this)
        val planning = PlanningRolesManagement(this)
        val execution = ExecuteActions(this)

        monitor.observers += analysis
        analysis.observers += planning
        planning.observers += execution
        execution.observers += monitor
        //------Generated by the Framework and must not be changed-----//


        //------Generated by the Framework and must be changed-----//
        //Declare quais os tipos de sensores vai utilizar
        sensors.add(typeSensor.ACC)

        //Initiate Sensor
        sensorManager = getSystemService(SENSOR_SERVICE) as SensorManager
        mAccelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)
        mGyroscope = sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE)
        //------Generated by the Framework and must be changed-----//


        //------Generated by the Framework and can be changed-----//
        //Verifica Permissões
        if(!PermissionsUtil().checkDevicePermission(this))
            PermissionsUtil().requetPermission(this)

        //GoogleFit
        val googleFitAPI = GoogleFitAPI(this)
        if(!googleFitAPI.oAuthPermissionsApproved())
            googleFitAPI.requestFitPermission()
        dataController = DataController()
        //------Generated by the Framework and can be changed-----//


        //------Generated by the User-----//
        baseDirectory = getExternalFilesDir(null)!!.absolutePath
        assetManager = getAssets()
        googleFitStepData = GoogleFitStepData(googleFitAPI)
        Log.i(TAG,"Running")
        Log.i(TAG,baseDirectory)

        //DB
        //Data Base Manager Sample
        dbPessoa = PessoaRepository(this)
        dbPessoa.Add(Pessoa(0,"João"))
        dbPessoa.Add(Pessoa(1,"Pedro"))
        dbPessoa.Add(Pessoa(2,"Deviante"))

        for(pessoa in dbPessoa.getAll()){
            Log.i("Pessoa", pessoa.nome)
        }

        //Use Next Button to test DB Manipulate
        var count = 0
        var pessoas = dbPessoa.getAll()

        //setSupportActionBar(binding.toolbar)

        textview_first = findViewById(R.id.textview_first) as TextView
        textview_second = findViewById(R.id.textview_second) as TextView
        buttonHistoric = findViewById<Button>(R.id.button_first)
        buttonStartMonitoring = findViewById<Button>(R.id.btnStartMonitoring) as Button

        textview_first.setText(texto)

        buttonHistoric.setOnClickListener {
            /*Toast.makeText(applicationContext, pessoas.get(count).nome, Toast.LENGTH_LONG).show()
            if (count == pessoas.size -1)
                count = 0
            else
                count+=1
            */
            val intent = Intent(this, HistoricActivity::class.java)
            startActivity(intent)
        }

        buttonStartMonitoring.setOnClickListener {
            Thread(Runnable {
                //------Generated by the Framework and can be changed-----//
                monitor.Monitoring()
                //execution.executeActionAlert()
                //------Generated by the Framework and can be changed-----//
            }).start()
        }

        ///Animação do monitoramento
        finalStatus = ""
        Thread(Runnable{
            while(!alarm) {

                if(!flagMonitoring){
                    if (texto != textview_second.text){
                        runOnUiThread {
                            textview_second.setText(texto)
                            textview_first.setText("")
                        }
                    }
                } else{
                    if (BaseActivity.finalStatus != textview_first.text){
                        runOnUiThread {
                            textview_first.setText(BaseActivity.finalStatus)
                            texto = ""
                            textview_second.setText("")
                        }
                    }
                }
            }
        }).start()

        //------Generated by the User-----//

    }


    //------Generated by the Framework and can be changed-----//
    //O que acontece quando voltar para essa tela
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        when (resultCode) {
            RESULT_OK -> {
                val postSignInAction = requestCode
                postSignInAction.let {
                }
            }
            else -> oAuthErrorMsg(requestCode, resultCode)
        }
    }
    //------Generated by the Framework and can be changed-----//


    //------Generated by the User-----//
    //Apresenta erro se houver erro de reuqisição ao voltar para a tela
    private fun oAuthErrorMsg(requestCode: Int, resultCode: Int) {
        val message = """
            There was an error signing into Fit. Check the troubleshooting section of the README
            for potential issues.
            Request code was: $requestCode
            Result code was: $resultCode
        """.trimIndent()
        Log.e(TAG, message)
        Toast.makeText(applicationContext, message, Toast.LENGTH_LONG).show()
    }
    //------Generated by the User-----//



    //------Generated by the User-----//
    //Gera opções do menu
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        // Inflate the menu; this adds items to the action bar if it is present.
        menuInflater.inflate(R.menu.menu_main, menu)
        return true
    }

    //------Generated by the User-----//

    //------Generated by the Framework and must be changed-----//
    //---Executa ao iniciar a tela//
    override fun onResume() {
        super.onResume()
        sensorManager!!.registerListener(this, mAccelerometer,
            SensorManager.SENSOR_DELAY_GAME)
        sensorManager!!.registerListener(this, mGyroscope,
            SensorManager.SENSOR_DELAY_GAME)
    }

    //---Executa ao para tela//
    override fun onPause() {
        super.onPause()
        sensorManager!!.unregisterListener(this)
    }

    //---Executa quando sensor muda o valor//
    override fun onSensorChanged(event: SensorEvent ?) {
        if (event != null) {
            if(event.sensor.type == Sensor.TYPE_ACCELEROMETER)
                collectAcc.collectData(event)
            if(event.sensor.type == Sensor.TYPE_GYROSCOPE)
                collectGyr.collectData(event)
        }
    }
    //------Generated by the Framework and must be changed-----//

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
    }
}