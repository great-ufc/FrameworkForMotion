//------Generated by the Framework and must not be changed-----//
//------Base DB Repository-----//
//------Abstract Class Base Repository. Another Repository for Specific Entity Should Be Created by developer-----//
//------See PessoaRepository Sample-----//

package br.ufc.POC1.model.dao.repository

import android.content.ContentValues
import android.content.Context
import android.database.Cursor
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import br.ufc.POC1.model.dao.data.UnityofWork
import br.ufc.POC1.model.dao.interfaces.IRepository

abstract class Repository(val ctx: Context, val TABLE_NAME:String, val lstColunms: MutableList<Triple<String,String,Boolean>>?):
    SQLiteOpenHelper(ctx, DB_NAME, null,DB_VERSION), IRepository{
    val db = this.writableDatabase
    val unitOfWork = UnityofWork(this)


    companion object {
        private val DB_VERSION = 1
        private val DB_NAME = "MyDataBase"
        private val ID = "Id"
    }

    abstract fun setContentValues()

    override fun onCreate(db: SQLiteDatabase?) {

        if(lstColunms != null){
           var colunms: String = ""

           for(c in lstColunms!!){
               if(!c.third){
                   colunms += c.first + " "+ c.second + ","
               }else
                   colunms += c.first + " "+ c.second
           }

            val CREATE_TABLE = "CREATE TABLE ${TABLE_NAME} (id INTEGER PRIMARY KEY, $colunms);"
            db?.execSQL(CREATE_TABLE)

        }

    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {
        val DROP_TABLE = "DROP TABLE IF EXISTS ${TABLE_NAME}"
        db?.execSQL(DROP_TABLE)
        onCreate(db)
    }

    override fun Add(cValues: ContentValues): Int {
        unitOfWork.transaction()
        val _success = db.insert(TABLE_NAME,null,cValues)
        return ("$_success").toInt()
    }

    override fun GetById(id: Int): Cursor {
        val selectQuery = "SELECT * FROM ${TABLE_NAME} WHERE ${ID} = $id"
        val cursor = db.rawQuery(selectQuery, null)
        return cursor
    }

    override fun GetAll(): Cursor {
        val selectQuery = "SELECT * FROM ${TABLE_NAME}"
        val cursor = db.rawQuery(selectQuery, null)
        return cursor
    }

    override fun Update(id:Int, info:String, valor:Boolean): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Update(id:Int, info:String, valor:Byte): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Update(id:Int, info:String, valor:ByteArray): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Update(id:Int, info:String, valor:Double): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Update(id:Int, info:String, valor:Float): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Update(id:Int, info:String, valor:Int): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Update(id:Int, info:String, valor:Short): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Update(id:Int, info:String, valor:String): Boolean {
        unitOfWork.transaction()
        val values = ContentValues().apply {
            put(info, valor)
        }
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(id.toString())).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun Remove(id: Int): Boolean {
        unitOfWork.transaction()
        val _success = db.delete(TABLE_NAME, ID + "=?", arrayOf(id.toString())).toLong()
        return ("$_success").toInt() != -1
    }

    override fun RemoveAll(): Boolean {
        unitOfWork.transaction()
        val _success = db.delete(TABLE_NAME, null,null).toLong()
        db.close()
        return ("$_success").toInt() != -1
    }

    override fun SaveChanges() {
        unitOfWork.commit()
    }
}