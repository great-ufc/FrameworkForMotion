//------Generated by the Framework and can be changed-----//
//------Sample of collect All Select Google Fit Data-----//
package br.ufc.POC1.model.mapek.monitoring.GoogleFit.Samples

import android.content.Context
import android.util.Log
import br.ufc.POC1.model.mapek.monitoring.GoogleFit.GoogleFitAPI
import br.ufc.POC1.model.utils.DateUtil
import br.ufc.POC1.controllers.DataController
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.fitness.Fitness
import com.google.android.gms.fitness.data.DataSet
import com.google.android.gms.fitness.data.DataType
import com.google.android.gms.fitness.request.DataReadRequest
import com.google.android.gms.fitness.request.SessionReadRequest
import com.google.android.gms.fitness.result.SessionReadResponse
import java.util.*
import java.util.concurrent.TimeUnit

class GoogleFitGetAllData(val api: GoogleFitAPI) {
    private val TAG = GoogleFitGetAllData::class.java.simpleName

    fun checkPermissionAndGetData() {
        if (!api.oAuthPermissionsApproved()) {
            api.requestFitPermission()
        } else {
            getData(api.activity, api.activity.dataController)
        }
    }

    private fun getData(context: Context, dataController: DataController) {
        getDataStatic(context, dataController)
    }

    companion object{

        fun getDataStatic(context: Context, dataController: DataController) {
            val beginDate = DateUtil.getBeginDateForRegistersLong()
            val endDate = DateUtil.getEndDateForRegistersLong()
            getDataStatic(context, dataController, beginDate, endDate)
        }

        fun getDataStatic(context: Context, dataController: DataController, beginDate: Long, endDate: Long) {
            val dataTypeList = mutableListOf<DataType>(
                DataType.AGGREGATE_STEP_COUNT_DELTA,
                DataType.AGGREGATE_CALORIES_EXPENDED,
                //DataType.TYPE_CALORIES_EXPENDED,
                DataType.TYPE_ACTIVITY_SEGMENT,
            )

            for (dataType in dataTypeList) {
                accessGoogleFit(dataType, context, dataController, beginDate, endDate)
            }

            getBodyMeasures(DataType.TYPE_HEIGHT, context, dataController)
            getBodyMeasures(DataType.TYPE_WEIGHT, context, dataController)

            getHeartRate(context, dataController, beginDate, endDate)
            accessSleepData(context, dataController, beginDate, endDate)
        }

        private fun accessGoogleFit(dataType: DataType, context: Context, dataController: DataController, beginDate: Long, endDate: Long) {
            val readRequest = DataReadRequest.Builder()
                .read(dataType)
                .enableServerQueries()
                .bucketByActivityType(1, TimeUnit.SECONDS)
                .setTimeRange(
                    beginDate.div(1000),
                    endDate.div(1000),
                    TimeUnit.SECONDS
                )
                .build()

            val account = GoogleSignIn.getAccountForExtension(context, GoogleFitAPI.getFitnessOptions())

            Fitness.getHistoryClient(context, account)
                .readData(readRequest)
                .addOnSuccessListener { response ->
                    val flatMap = response.buckets.flatMap { it.dataSets }
                    if(validateFlatMap(flatMap)){
                        dataController.setData(dataType, flatMap)
                        //flatMap.forEach { dumpDataSet(it) }
                    }else{
                        dataController.registerGoogleFitError(dataType)
                    }
                }
                .addOnFailureListener {
                    dataController.registerGoogleFitError(dataType)
                }
        }

        private fun validateFlatMap(flatMap: List<DataSet>): Boolean{
            if(flatMap.isEmpty()) return false
            var emptyDS = 0
            flatMap.forEach { ds ->
                if(ds.isEmpty) emptyDS++
            }
            if(emptyDS == flatMap.size) return false

            return true
        }

        private fun getBodyMeasures(dataType: DataType, context: Context, dataController: DataController){
            val readRequest = DataReadRequest.Builder()
                .read(dataType)
                .setLimit(1)
                .setTimeRange(1, Calendar.getInstance().timeInMillis, TimeUnit.MILLISECONDS)
                .build()

            val account = GoogleSignIn.getAccountForExtension(context,
                GoogleFitAPI.getFitnessOptions()
            )

            Fitness.getHistoryClient(context, account)
                .readData(readRequest)
                .addOnSuccessListener { response ->
                    if(response.dataSets.size > 0){
                        //dumpDataSet(response.dataSets.get(0))
                        val dataSet = response.dataSets[0]
                        if(dataSet.isEmpty){
                            dataController.registerGoogleFitError(dataType)
                        }else{
                            dataController.setData(dataType, dataSet)
                        }
                    }
                }
                .addOnFailureListener {
                    dataController.registerGoogleFitError(dataType)
                }
        }

        private fun getHeartRate(context: Context, dataController: DataController, beginDate: Long, endDate: Long){
            val dataType = DataType.TYPE_HEART_RATE_BPM

            val readRequest = DataReadRequest.Builder()
                .read(dataType)
                .enableServerQueries()
                .setTimeRange(
                    beginDate.div(1000),
                    endDate.div(1000), TimeUnit.SECONDS).build()

            val account = GoogleSignIn.getAccountForExtension(context,
                GoogleFitAPI.getFitnessOptions()
            )

            Fitness.getHistoryClient(context, account)
                .readData(readRequest)
                .addOnSuccessListener { response ->
                    if(response.dataSets.size == 1){
                        //dumpDataSet(response.dataSets[0])
                        val dataSet = response.dataSets[0]
                        if(dataSet.isEmpty){
                            dataController.registerGoogleFitError(dataType)
                        }else{
                            dataController.setData(dataType, dataSet)
                        }
                    }
                }
                .addOnFailureListener { e ->
                    Log.e(GoogleFitGetAllData::class.java.simpleName, e.toString(), e.cause)
                    dataController.registerGoogleFitError(dataType)
                }
        }

        private fun accessSleepData(context: Context, dataController: DataController, beginDate: Long, endDate: Long){
            val dataType = DataType.TYPE_SLEEP_SEGMENT
            val request = SessionReadRequest.Builder()
                .read(dataType)
                .includeSleepSessions()
                .readSessionsFromAllApps()
                .setTimeInterval(
                    beginDate.div(1000),
                    endDate.div(1000),
                    TimeUnit.SECONDS
                )
                .build()

            val account = GoogleSignIn.getAccountForExtension(context,
                GoogleFitAPI.getFitnessOptions()
            )

            Fitness.getSessionsClient(context, account).readSession(request)
                .addOnSuccessListener { response ->
                    if(validateSessions(response)){
                        for (session in response.sessions) {
                            val dataSets = response.getDataSet(session)
                            for (dataSet in dataSets) {
                                dataController.setData(dataType, dataSet)
                            }
                        }
                    }else{
                        dataController.registerGoogleFitError(dataType)
                    }
                }
                .addOnFailureListener {
                    dataController.registerGoogleFitError(dataType)
                }
        }

        private fun validateSessions(response: SessionReadResponse):Boolean{
            if(response.sessions.isEmpty()) return false
            for (session in response.sessions) {
                val dataSets = response.getDataSet(session)
                if(dataSets.isNotEmpty()) return true
            }
            return false
        }

    }
}